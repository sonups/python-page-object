============================= test session starts =============================
platform win32 -- Python 3.9.1, pytest-6.0.1, py-1.10.0, pluggy-0.13.1 -- c:\python\python39\python.exe
cachedir: .pytest_cache
metadata: {'Python': '3.9.1', 'Platform': 'Windows-10-10.0.19041-SP0', 'Packages': {'pytest': '6.0.1', 'py': '1.10.0', 'pluggy': '0.13.1'}, 'Plugins': {'allure-pytest': '2.8.6', 'clarity': '0.2.0a1', 'cov': '2.8.1', 'forked': '1.3.0', 'html': '2.0.0', 'metadata': '1.8.0', 'reportportal': '1.10.0', 'rerunfailures': '9.1.1', 'xdist': '1.31.0'}, 'JAVA_HOME': 'D:\\Program Files\\Java\\jdk1.8.0_271'}
Project: Pytest Page Object Model
Written by: Volodymyr Yahello
rootdir: D:\Sonu\personal\xeneta-test\python-page-object, configfile: pytest.ini
plugins: allure-pytest-2.8.6, clarity-0.2.0a1, cov-2.8.1, forked-1.3.0, html-2.0.0, metadata-1.8.0, reportportal-1.10.0, rerunfailures-9.1.1, xdist-1.31.0
collected 9 items
cache -- c:\python\python39\lib\site-packages\_pytest\cacheprovider.py:473
    Return a cache object that can persist state between testing sessions.
    
    cache.get(key, default)
    cache.set(key, value)
    
    Keys must be a ``/`` separated value, where the first part is usually the
    name of your plugin or application to avoid clashes with other cache users.
    
    Values can be any object handled by the json stdlib module.

capsys -- c:\python\python39\lib\site-packages\_pytest\capture.py:825
    Enable text capturing of writes to ``sys.stdout`` and ``sys.stderr``.
    
    The captured output is made available via ``capsys.readouterr()`` method
    calls, which return a ``(out, err)`` namedtuple.
    ``out`` and ``err`` will be ``text`` objects.

capsysbinary -- c:\python\python39\lib\site-packages\_pytest\capture.py:842
    Enable bytes capturing of writes to ``sys.stdout`` and ``sys.stderr``.
    
    The captured output is made available via ``capsysbinary.readouterr()``
    method calls, which return a ``(out, err)`` namedtuple.
    ``out`` and ``err`` will be ``bytes`` objects.

capfd -- c:\python\python39\lib\site-packages\_pytest\capture.py:859
    Enable text capturing of writes to file descriptors ``1`` and ``2``.
    
    The captured output is made available via ``capfd.readouterr()`` method
    calls, which return a ``(out, err)`` namedtuple.
    ``out`` and ``err`` will be ``text`` objects.

capfdbinary -- c:\python\python39\lib\site-packages\_pytest\capture.py:876
    Enable bytes capturing of writes to file descriptors ``1`` and ``2``.
    
    The captured output is made available via ``capfd.readouterr()`` method
    calls, which return a ``(out, err)`` namedtuple.
    ``out`` and ``err`` will be ``byte`` objects.

doctest_namespace [session scope] -- c:\python\python39\lib\site-packages\_pytest\doctest.py:738
    Fixture that returns a :py:class:`dict` that will be injected into the namespace of doctests.

pytestconfig [session scope] -- c:\python\python39\lib\site-packages\_pytest\fixtures.py:1398
    Session-scoped fixture that returns the :class:`_pytest.config.Config` object.
    
    Example::
    
        def test_foo(pytestconfig):
            if pytestconfig.getoption("verbose") > 0:
                ...

record_property -- c:\python\python39\lib\site-packages\_pytest\junitxml.py:305
    Add extra properties to the calling test.
    
    User properties become part of the test report and are available to the
    configured reporters, like JUnit XML.
    
    The fixture is callable with ``name, value``. The value is automatically
    XML-encoded.
    
    Example::
    
        def test_function(record_property):
            record_property("example_key", 1)

record_xml_attribute -- c:\python\python39\lib\site-packages\_pytest\junitxml.py:328
    Add extra xml attributes to the tag for the calling test.
    
    The fixture is callable with ``name, value``. The value is
    automatically XML-encoded.

record_testsuite_property [session scope] -- c:\python\python39\lib\site-packages\_pytest\junitxml.py:366
    Records a new ``<property>`` tag as child of the root ``<testsuite>``. This is suitable to
    writing global information regarding the entire test suite, and is compatible with ``xunit2`` JUnit family.
    
    This is a ``session``-scoped fixture which is called with ``(name, value)``. Example:
    
    .. code-block:: python
    
        def test_foo(record_testsuite_property):
            record_testsuite_property("ARCH", "PPC")
            record_testsuite_property("STORAGE_TYPE", "CEPH")
    
    ``name`` must be a string, ``value`` will be converted to a string and properly xml-escaped.

caplog -- c:\python\python39\lib\site-packages\_pytest\logging.py:466
    Access and control log capturing.
    
    Captured logs are available through the following properties/methods::
    
    * caplog.messages        -> list of format-interpolated log messages
    * caplog.text            -> string containing formatted log output
    * caplog.records         -> list of logging.LogRecord instances
    * caplog.record_tuples   -> list of (logger_name, level, message) tuples
    * caplog.clear()         -> clear captured records and formatted log output string

monkeypatch -- c:\python\python39\lib\site-packages\_pytest\monkeypatch.py:29
    The returned ``monkeypatch`` fixture provides these
    helper methods to modify objects, dictionaries or os.environ::
    
        monkeypatch.setattr(obj, name, value, raising=True)
        monkeypatch.delattr(obj, name, raising=True)
        monkeypatch.setitem(mapping, name, value)
        monkeypatch.delitem(obj, name, raising=True)
        monkeypatch.setenv(name, value, prepend=False)
        monkeypatch.delenv(name, raising=True)
        monkeypatch.syspath_prepend(path)
        monkeypatch.chdir(path)
    
    All modifications will be undone after the requesting
    test function or fixture has finished. The ``raising``
    parameter determines if a KeyError or AttributeError
    will be raised if the set/deletion operation has no target.

recwarn -- c:\python\python39\lib\site-packages\_pytest\recwarn.py:29
    Return a :class:`WarningsRecorder` instance that records all warnings emitted by test functions.
    
    See http://docs.python.org/library/warnings.html for information
    on warning categories.

tmpdir_factory [session scope] -- c:\python\python39\lib\site-packages\_pytest\tmpdir.py:155
    Return a :class:`_pytest.tmpdir.TempdirFactory` instance for the test session.
        

tmp_path_factory [session scope] -- c:\python\python39\lib\site-packages\_pytest\tmpdir.py:163
    Return a :class:`_pytest.tmpdir.TempPathFactory` instance for the test session.
        

tmpdir -- c:\python\python39\lib\site-packages\_pytest\tmpdir.py:179
    Return a temporary directory path object
    which is unique to each test function invocation,
    created as a sub directory of the base temporary
    directory.  The returned object is a `py.path.local`_
    path object.
    
    .. _`py.path.local`: https://py.readthedocs.io/en/latest/path.html

tmp_path -- c:\python\python39\lib\site-packages\_pytest\tmpdir.py:192
    Return a temporary directory path object
    which is unique to each test function invocation,
    created as a sub directory of the base temporary
    directory.  The returned object is a :class:`pathlib.Path`
    object.
    
    .. note::
    
        in python < 3.6 this is a pathlib2.Path


------------------- fixtures defined from pytest_cov.plugin -------------------
no_cover -- c:\python\python39\lib\site-packages\pytest_cov\plugin.py:345
    A pytest fixture to disable coverage.

cov -- c:\python\python39\lib\site-packages\pytest_cov\plugin.py:351
    A pytest fixture to provide access to the underlying coverage object.


---------------- fixtures defined from pytest_metadata.plugin -----------------
metadata [session scope] -- c:\python\python39\lib\site-packages\pytest_metadata\plugin.py:43
    Provide test session metadata


----------------- fixtures defined from tests.plugins.browser -----------------
browser [session scope] -- tests\plugins\browser.py:6
    tests\plugins\browser.py:6: no docstring available


----------------- fixtures defined from tests.plugins.handler -----------------
handler_by [module scope] -- tests\plugins\handler.py:6
    tests\plugins\handler.py:6: no docstring available


------------------ fixtures defined from tests.plugins.input ------------------
register_page_input [module scope] -- tests\plugins\input.py:6
    tests\plugins\input.py:6: no docstring available


---------------- fixtures defined from tests.plugins.locators -----------------
register_page_locator [module scope] -- tests\plugins\locators.py:6
    tests\plugins\locators.py:6: no docstring available


------------------ fixtures defined from tests.plugins.pages ------------------
register_page [module scope] -- tests\plugins\pages.py:14
    tests\plugins\pages.py:14: no docstring available

home_page [module scope] -- tests\plugins\pages.py:9
    tests\plugins\pages.py:9: no docstring available


------------------ fixtures defined from tests.plugins.urls -------------------
register_url [module scope] -- tests\plugins\urls.py:11
    tests\plugins\urls.py:11: no docstring available

sign_on_url [module scope] -- tests\plugins\urls.py:16
    tests\plugins\urls.py:16: no docstring available

home_url [module scope] -- tests\plugins\urls.py:6
    tests\plugins\urls.py:6: no docstring available


--------------------- fixtures defined from xdist.plugin ----------------------
worker_id [session scope] -- c:\python\python39\lib\site-packages\xdist\plugin.py:209
    Return the id of the current worker ('gw0', 'gw1', etc) or 'master'
    if running on the master node.


--------- fixtures defined from tests.coverage.unit.browsers.conftest ---------
browser -- tests\coverage\unit\browsers\conftest.py:11
    tests\coverage\unit\browsers\conftest.py:11: no docstring available


- generated html file: file://D:\Sonu\personal\xeneta-test\python-page-object\test-report.html -
============================ no tests ran in 0.67s ============================
